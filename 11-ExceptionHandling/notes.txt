Bullet Points:

- A method can throw an exception when something fails at runtime.

- An exception is always an object of type Exception. (Which, as you remember from the polymorphism chapters means that the object is from a class that has exception somewhere up its inheritance tree.)

- The compiler does NOT pay attention to exceptions that are of type RuntimeException. A Runtime Exception does not have to be declared or wrapped in a try/catch (although you're free to do either or both of those things)/

- All Exceptions the complier cares about are called 'cehcked exceptions' which really means compiler-checked exceptions. Only RuntimeExceptions are excluded from complier checking. All other execptions must be acknowledged in your codde, according to the rules.

- A method throws an exception with the keywoard throw, followed by a new exception object:

> throw new NoCaffineException();

- Methods that might throw a checked exception must announce it with a throws Exception decleration.

- If your code calls a checked-exception-throwing method, it must reassure the complier that precautions have been take.

- If you're prepared to the handle the exception, wrap the call in a try/catch, and put your exception handling/recovery code in the catch block.

- If you're not prepared to handle the exception, you can still make the complier happy by officially 'ducking' the exception. (by declaring that the method throws the exception)